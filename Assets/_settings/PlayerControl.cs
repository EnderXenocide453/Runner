//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_settings/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""TouchMap"",
            ""id"": ""633e3b4a-e77c-4e88-ac48-0a2f6b94fd77"",
            ""actions"": [
                {
                    ""name"": ""TouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""3c53fbeb-1675-4df1-9f54-8e56e9c211a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""a6dda4cd-477d-4207-8688-ba4567a93488"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseAbility"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bcb1534b-9ce5-4548-9c79-e05e5f108094"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62ee3cd3-6840-468e-b0b0-b9e236a2bbd6"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8eb4cbc8-c8fd-47f6-83c9-e1e8a821283a"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d86c196-3bd4-4b3d-b37b-e805d07e9a75"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PC map"",
            ""id"": ""ffec4ccc-359d-408c-86a0-ea59028239f3"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""5a82fe90-9479-4145-9106-0055232d1371"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""4355d7c7-83ee-4d13-b270-4918d429785e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""0dd87e18-d179-48ea-927c-d63d561655ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""44b69feb-8d60-44b6-b974-61358d9ec0cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""f3a75208-eb78-4381-ab13-34348eb657b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseAbility"",
                    ""type"": ""Button"",
                    ""id"": ""a54eed87-f6e6-4e41-997d-46ef69af3ca9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be45e7f6-0eae-451c-ae71-16da6854a4fc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""008025f9-c359-4856-a8a7-e1fa5b6fbc91"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74f8c308-bef2-4db0-915b-38bb57b5d169"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd6d577a-8866-4ebb-9b21-e23060675067"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9d3cb99-a728-4507-bc6d-5c564873b63a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dbd7214-5809-4828-b4d5-58a80e93a9a6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02b89ea7-599b-4819-9985-ae30cb0f568d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a5c7ff7-35a6-4b98-9dee-171e38efcfa2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9233a3bd-3f3c-4429-924e-deeab3b0e2dd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bee1bf60-5827-4706-a731-6ebdf12417db"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""693db1ff-b051-4712-9d7b-c1ae67744d77"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f39018a-031b-4f40-96c3-6115bab98e2a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GeneralMap"",
            ""id"": ""d892a9b9-bc48-4d23-bb5f-2a2a58f85cdc"",
            ""actions"": [
                {
                    ""name"": ""PauseAction"",
                    ""type"": ""Button"",
                    ""id"": ""173b7fd3-307d-42b2-953c-3f04dffcb4cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f8752f7-c7ad-4f91-a851-2d7c1ff3d872"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchMap
        m_TouchMap = asset.FindActionMap("TouchMap", throwIfNotFound: true);
        m_TouchMap_TouchContact = m_TouchMap.FindAction("TouchContact", throwIfNotFound: true);
        m_TouchMap_TouchPosition = m_TouchMap.FindAction("TouchPosition", throwIfNotFound: true);
        m_TouchMap_UseAbility = m_TouchMap.FindAction("UseAbility", throwIfNotFound: true);
        // PC map
        m_PCmap = asset.FindActionMap("PC map", throwIfNotFound: true);
        m_PCmap_MousePosition = m_PCmap.FindAction("MousePosition", throwIfNotFound: true);
        m_PCmap_Left = m_PCmap.FindAction("Left", throwIfNotFound: true);
        m_PCmap_Right = m_PCmap.FindAction("Right", throwIfNotFound: true);
        m_PCmap_Jump = m_PCmap.FindAction("Jump", throwIfNotFound: true);
        m_PCmap_Roll = m_PCmap.FindAction("Roll", throwIfNotFound: true);
        m_PCmap_UseAbility = m_PCmap.FindAction("UseAbility", throwIfNotFound: true);
        // GeneralMap
        m_GeneralMap = asset.FindActionMap("GeneralMap", throwIfNotFound: true);
        m_GeneralMap_PauseAction = m_GeneralMap.FindAction("PauseAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchMap
    private readonly InputActionMap m_TouchMap;
    private List<ITouchMapActions> m_TouchMapActionsCallbackInterfaces = new List<ITouchMapActions>();
    private readonly InputAction m_TouchMap_TouchContact;
    private readonly InputAction m_TouchMap_TouchPosition;
    private readonly InputAction m_TouchMap_UseAbility;
    public struct TouchMapActions
    {
        private @PlayerControl m_Wrapper;
        public TouchMapActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchContact => m_Wrapper.m_TouchMap_TouchContact;
        public InputAction @TouchPosition => m_Wrapper.m_TouchMap_TouchPosition;
        public InputAction @UseAbility => m_Wrapper.m_TouchMap_UseAbility;
        public InputActionMap Get() { return m_Wrapper.m_TouchMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchMapActions set) { return set.Get(); }
        public void AddCallbacks(ITouchMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Add(instance);
            @TouchContact.started += instance.OnTouchContact;
            @TouchContact.performed += instance.OnTouchContact;
            @TouchContact.canceled += instance.OnTouchContact;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @UseAbility.started += instance.OnUseAbility;
            @UseAbility.performed += instance.OnUseAbility;
            @UseAbility.canceled += instance.OnUseAbility;
        }

        private void UnregisterCallbacks(ITouchMapActions instance)
        {
            @TouchContact.started -= instance.OnTouchContact;
            @TouchContact.performed -= instance.OnTouchContact;
            @TouchContact.canceled -= instance.OnTouchContact;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @UseAbility.started -= instance.OnUseAbility;
            @UseAbility.performed -= instance.OnUseAbility;
            @UseAbility.canceled -= instance.OnUseAbility;
        }

        public void RemoveCallbacks(ITouchMapActions instance)
        {
            if (m_Wrapper.m_TouchMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchMapActions @TouchMap => new TouchMapActions(this);

    // PC map
    private readonly InputActionMap m_PCmap;
    private List<IPCmapActions> m_PCmapActionsCallbackInterfaces = new List<IPCmapActions>();
    private readonly InputAction m_PCmap_MousePosition;
    private readonly InputAction m_PCmap_Left;
    private readonly InputAction m_PCmap_Right;
    private readonly InputAction m_PCmap_Jump;
    private readonly InputAction m_PCmap_Roll;
    private readonly InputAction m_PCmap_UseAbility;
    public struct PCmapActions
    {
        private @PlayerControl m_Wrapper;
        public PCmapActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_PCmap_MousePosition;
        public InputAction @Left => m_Wrapper.m_PCmap_Left;
        public InputAction @Right => m_Wrapper.m_PCmap_Right;
        public InputAction @Jump => m_Wrapper.m_PCmap_Jump;
        public InputAction @Roll => m_Wrapper.m_PCmap_Roll;
        public InputAction @UseAbility => m_Wrapper.m_PCmap_UseAbility;
        public InputActionMap Get() { return m_Wrapper.m_PCmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCmapActions set) { return set.Get(); }
        public void AddCallbacks(IPCmapActions instance)
        {
            if (instance == null || m_Wrapper.m_PCmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PCmapActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @UseAbility.started += instance.OnUseAbility;
            @UseAbility.performed += instance.OnUseAbility;
            @UseAbility.canceled += instance.OnUseAbility;
        }

        private void UnregisterCallbacks(IPCmapActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @UseAbility.started -= instance.OnUseAbility;
            @UseAbility.performed -= instance.OnUseAbility;
            @UseAbility.canceled -= instance.OnUseAbility;
        }

        public void RemoveCallbacks(IPCmapActions instance)
        {
            if (m_Wrapper.m_PCmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPCmapActions instance)
        {
            foreach (var item in m_Wrapper.m_PCmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PCmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PCmapActions @PCmap => new PCmapActions(this);

    // GeneralMap
    private readonly InputActionMap m_GeneralMap;
    private List<IGeneralMapActions> m_GeneralMapActionsCallbackInterfaces = new List<IGeneralMapActions>();
    private readonly InputAction m_GeneralMap_PauseAction;
    public struct GeneralMapActions
    {
        private @PlayerControl m_Wrapper;
        public GeneralMapActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseAction => m_Wrapper.m_GeneralMap_PauseAction;
        public InputActionMap Get() { return m_Wrapper.m_GeneralMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralMapActions set) { return set.Get(); }
        public void AddCallbacks(IGeneralMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GeneralMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeneralMapActionsCallbackInterfaces.Add(instance);
            @PauseAction.started += instance.OnPauseAction;
            @PauseAction.performed += instance.OnPauseAction;
            @PauseAction.canceled += instance.OnPauseAction;
        }

        private void UnregisterCallbacks(IGeneralMapActions instance)
        {
            @PauseAction.started -= instance.OnPauseAction;
            @PauseAction.performed -= instance.OnPauseAction;
            @PauseAction.canceled -= instance.OnPauseAction;
        }

        public void RemoveCallbacks(IGeneralMapActions instance)
        {
            if (m_Wrapper.m_GeneralMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeneralMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GeneralMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeneralMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GeneralMapActions @GeneralMap => new GeneralMapActions(this);
    public interface ITouchMapActions
    {
        void OnTouchContact(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnUseAbility(InputAction.CallbackContext context);
    }
    public interface IPCmapActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnUseAbility(InputAction.CallbackContext context);
    }
    public interface IGeneralMapActions
    {
        void OnPauseAction(InputAction.CallbackContext context);
    }
}
